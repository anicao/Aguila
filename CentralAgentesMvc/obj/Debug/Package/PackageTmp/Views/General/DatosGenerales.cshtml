@model CentralAgentesMvc.Models.GenericoViewModel

<div class="well well-xs" style="padding: 5px; margin: -10px">
    @using (Html.BeginForm("UpdateDatosGenerales", "General", FormMethod.Post, new { @class = "form-horizontal", role = "form", @id = "frmGenData" }))
    {
        @Html.ValidationSummary(true)
        @Html.AntiForgeryToken()

        <div id="tabs">
            <ul class="nav nav-tabs" data-tabs="tabs" id="tabColor">
                <li class="active">
                    <a href="#tbDatos" data-toggle="tab">
                        <span class="fa fa-newspaper-o"></span>&nbsp;
                            Datos Generales
                    </a>
                </li>
                <li id="tbHiddenInNew">
                    <a href="#tbAddressPhones" data-toggle="tab">
                        <span class="fa fa-street-view"></span>
                        <span class="fa fa-phone"></span>&nbsp;Direcciones y Teléfonos</a>
                </li>
            </ul>
            <br />
            <div id="tabGen" class="tab-content my-tab">
                <div class="tab-pane active" id="tbDatos">

                    <div id="dvHiddenInNew1" class="form-group" style="margin-bottom: 1px;">
                        @Html.Label("Solicitud No:", new { @class = "col-xs-2 control-label-sm", style = "text-align: left;" })
                        <div class="form-validator col-xs-3">
                            @Html.TextBoxFor(m => m.solicitudID, new
                       {
                           @class = "form-control input-sm readOnlyWhite",
                           @placeholder = "Solicitud No",
                           value = Model.solicitudID,
                           @readonly = "readonly"
                       })
                        </div>
                        <div class="form-validator col-xs-7">
                            @Html.TextBoxFor(m => m.strNomAsegSolicitud, new
                       {
                           @class = "form-control input-sm readOnlyWhite",
                           @placeholder = "Titular",
                           value = Model.strNomAsegSolicitud,
                           @readonly = "readonly"
                       })
                        </div>
                    </div>
                                
                    <div class="form-group" style="margin-bottom: 1px;">
                        @Html.Label("Oficina:", new { @class = "col-xs-2 control-label-sm" })
                        <div class="form-validator col-xs-3">
                            @Html.DropDownListFor(m => m.oficinaID, new SelectList(Model.OficinasSource, "strCve", "strDesc", 1), new { @class = "form-control input-sm" })
                            @Html.ValidationMessageFor(m => m.oficinaID)
                        </div>

                        @{
        if (Model.ModulodeTrabajo != "Cotizaciones")
        {
                                <div id="dvHiddenInNew2">
                                    @Html.Label("Póliza No:", new { @class = "col-xs-5 control-label-sm", style = "text-align: right;" })
                                    <div class="col-xs-2">
                                        @Html.TextBoxFor(m => m.poliza, new { @class = "form-control input-sm readOnlyWhite", @placeholder = "Póliza", value = Model.poliza, @readonly = "readonly" })
                                    </div>
                                </div>
        }
                        }
                    </div>
                
                    <div class="form-group" style="margin-bottom: 1px;">
                        @Html.Label("Titulo:", new { @class = "col-xs-2 control-label-sm" })
                        <div class="form-validator col-xs-2">
                            @Html.TextBoxFor(m => m.titulo, new { @class = "form-control input-sm uppercase", @placeholder = "Titulo", value = Model.titulo})
                            @Html.ValidationMessageFor(m => m.titulo)
                        </div>

                        @Html.Label("Código Postal:", new { @class = "col-xs-2 control-label-sm", style = "text-align: right;" })
                        <div class="form-validator col-xs-2">
                            @Html.TextBoxFor(m => m.codigoPostal, new { @class = "form-control input-sm", @maxlength = "5", @placeholder = "Código Postal", value = Model.codigoPostal })
                        </div>

                        @Html.Label("Sexo:", new { @class = "col-xs-2 control-label-sm", style = "text-align: right;" })
                        <div class="form-validator col-xs-2">
                            @Html.CheckBoxFor(m => m.EsHombre, new { @class = "form-control checkbox-sm" })
                        </div>
                    </div>
                
                    <div class="form-group" style="margin-bottom: 1px;">
                        @Html.Label("Apellido(s) y Nombre(s):", new { @class = "col-xs-2 control-label-sm" })
                        <div class="form-validator col-xs-3">
                            @Html.TextBoxFor(m => m.apellidoPaterno, new { @class = "form-control input-sm uppercase", @placeholder = "Apellido Paterno", value = Model.apellidoPaterno })
                            @Html.ValidationMessageFor(m => m.apellidoPaterno)
                        </div>
                        <div class="form-validator col-xs-3">
                            @Html.TextBoxFor(m => m.apellidoMaterno, new { @class = "form-control input-sm uppercase", @placeholder = "Apellido Materno", value = Model.apellidoMaterno })
                            @Html.ValidationMessageFor(m => m.apellidoMaterno)
                        </div>
                        <div class="form-validator col-xs-4">
                            @Html.TextBoxFor(m => m.nombres, new { @class = "form-control input-sm uppercase", @placeholder = "Nombre(s)", value = Model.nombres })
                            @Html.ValidationMessageFor(m => m.nombres)
                        </div>
                    </div>

                    <div class="form-group" style="margin-bottom: 1px;">
                        @Html.Label("Nombre del Asegurado:", new { @class = "col-xs-2 control-label-sm" })
                        <div class="col-xs-6">
                            @Html.TextBoxFor(m => m.nombreAsegurado, new
                       {
                           @class = "form-control input-sm readOnlyWhite",
                           @placeholder = "Nombre del Asegurado",
                           value = Model.nombreAsegurado,
                           @readonly = "readonly"
                       })
                        </div>
                    </div>

                    <div id="dvHiddenInNew3" class="form-group" style="margin-bottom: 1px;">
                        @Html.Label("Cliente:", new { @class = "col-xs-2 control-label-sm" })
                        <div class="form-validator col-xs-3">
                            @Html.TextBoxFor(m => m.clienteID, new { @class = "form-control input-sm", @placeholder = "Cliente", value = Model.clienteID })
                        </div>
                        <div class="col-xs-7">
                            @Html.TextBoxFor(m => m.nomTitular, new
                       {
                           @class = "form-control input-sm readOnlyWhite",
                           @placeholder = "Nombre Cliente",
                           value = Model.nomTitular,
                           @readonly = "readonly"
                       })
                        </div>
                    </div>
                
                    <div class="form-group" style="margin-bottom: 1px;">
                        @Html.Label("Teléfono:", new { @class = "col-xs-2 control-label-sm" })
                        <div class="form-validator col-xs-3">
                            @Html.TextBoxFor(m => m.PrimerTelefono, new { @class = "form-control input-sm", @placeholder = "Teléfono", value = Model.PrimerTelefono })
                            @Html.ValidationMessageFor(m => m.PrimerTelefono)
                        </div>

                        @Html.Label("Procar:", new { @class = "col-xs-1 control-label-sm", style = "text-align: right;" })
                        <div class="form-validator col-xs-2">
                            @Html.TextBoxFor(m => m.control, new { @class = "form-control input-sm", @maxlength = "2", @placeholder = "Procar", value = Model.control })
                            @Html.ValidationMessageFor(m => m.control)
                        </div>

                        <div id="dvHiddenInNew4">
                            @Html.Label("Tipo de Persona:", new { @class = "col-xs-2 control-label-sm", style = "text-align: right;" })
                            <div class="col-xs-2">
                                @Html.CheckBoxFor(m => m.EsPersonaFisica, new { @class = "form-control checkbox-sm" })
                            </div>
                        </div>

                    </div>

                    <div class="form-group" style="margin-bottom: 1px;">
                        @Html.Label("Campaña:", new { @class = "col-xs-2 control-label-sm" })
                        <div class="form-validator col-xs-3">
                            @Html.TextBoxFor(m => m.campaña, new { @class = "form-control input-sm", @placeholder = "Campaña", value = Model.campaña, id = "txtCampain", @readonly = "readonly" })
                            @Html.ValidationMessageFor(m => m.campaña)
                        </div>
                        <div class="col-xs-7">
                            @Html.DropDownListFor(m => m.campaña, new SelectList(Model.CampañasSource, "strCve", "strDesc", 1), new { @class = "form-control input-sm", id = "ddlCampain", @disabled = "disabled" })
                        </div>
                    </div>

                    <div id="dvHiddenInNew5" class="form-group" style="margin-bottom: 1px;">
                        @Html.Label("Agente:", new { @class = "col-xs-2 control-label-sm" })
                        <div class="form-validator col-xs-3">
                            @Html.TextBoxFor(m => m.agente, new { @class = "form-control input-sm", @placeholder = "Agente", value = Model.agente, @readonly = "readonly" })
                        </div>
                        <div class="col-xs-7">
                            @Html.DropDownListFor(m => m.agente, new SelectList(Model.AgentesSource, "lngAgente", "strNombre", 1), new { @class = "form-control input-sm", id = "ddlAgent", @disabled = "disabled" })
                        </div>
                    </div>

                    <div id="dvHiddenInNew6" class="form-group" style="margin-bottom: 1px;">
                        @Html.Label("Promoción:", new { @class = "col-xs-2 control-label-sm" })
                        <div class="col-xs-8">
                            @Html.DropDownListFor(m => m.promocion, new SelectList(Model.PromocionesSource, "nPromocionId", "cNombre", 1), new { @class = "form-control input-sm", @id = "ddlPromo" })
                        </div>

                        <div id="dvHiddenKIT" class="col-xs-2 text-right">
                            <label class="control-label-sm text-align: left;">KIT&nbsp;&nbsp;@Html.CheckBoxFor(m => m.LlevaKit, new { @class = "checkbox-sm" })</label>
                        </div>
                    </div>

                    <div class="form-group" style="margin-bottom: 1px;">
                        @Html.Label("Conductor bajo riesgo:", new { @class = "col-xs-2 control-label-sm" })
                        <div class="form-validator col-xs-2">
                            @Html.DropDownListFor(m => m.conductorRestringido, new SelectList(Model.RiesgoConductorSource, "Key", "Value", 1)
                                                              , new { @class = "form-control input-sm", @placeholder = "Conductor bajo riesgo" })
                            @Html.ValidationMessageFor(m => m.conductorRestringido)
                        </div>

                        @Html.Label("TERSSA:", new { @class = "col-xs-2 control-label-sm", style = "text-align: right;" })
                        <div class="col-xs-2">
                            @Html.CheckBoxFor(m => m.AplicaTERSSA, new { @class = "form-control checkbox-sm" })
                        </div>
                    </div> 

                    <div class="form-group" style="margin-bottom: 1px;">
                        @Html.Label("Número de Vehículos:", new { @class = "col-xs-2 control-label-sm" })
                        <div class="form-validator col-xs-2">
                            @Html.TextBoxFor(m => m.numVehiculos, new { @class = "form-control input-sm", @maxlength = "2", @placeholder = "Número de Vehiculos", value = Model.numVehiculos })
                            @Html.ValidationMessageFor(m => m.numVehiculos)
                        </div>

                        @Html.Label("Cobertura 100:", new { @class = "col-xs-2 control-label-sm", style = "text-align: right;" })
                        <div class="col-xs-2">
                            @Html.CheckBoxFor(m => m.AplicaCobertura100, new { @class = "form-control checkbox-sm", @checked = false })
                        </div>

                        <div id="dvHiddenInNew7">
                            @Html.Label("Tipo de Pago:", new { @class = "col-xs-2 control-label-sm", style = "text-align: right;" })
                            <div class="col-xs-2">
                                @Html.DropDownListFor(m => m.cFormaPago, new SelectList(Model.FormaPagoSource, "strCve", "strDesc"), new { @class = "form-control input-sm" })
                                @Html.ValidationMessageFor(m => m.cFormaPago)
                            </div>
                        </div>
                    </div>

                    <div class="form-group" style="margin-bottom: 2px;">
                        @Html.Label("Número Conductores:", new { @class = "col-xs-2 control-label-sm" })
                        <div class="form-validator col-xs-2">
                            @Html.TextBoxFor(m => m.numConductores, new { @class = "form-control input-sm", @maxlength = "2", @placeholder = "Número Conductores", value = Model.numConductores })
                            @Html.ValidationMessageFor(m => m.numConductores)
                        </div>

                        @Html.Label("ERA:", new { @class = "col-xs-2 control-label-sm", style = "text-align: right;" })
                        <div class="col-xs-2">
                            @Html.CheckBoxFor(m => m.AplicaERA, new { @class = "form-control checkbox-sm", @readonly = "readonly" })
                        </div>

                        <div id="dvHiddenInNew8">
                            @Html.Label("Forma de Pago:", new { @class = "col-xs-2 control-label-sm", style = "text-align: right;" })
                            <div class="col-xs-2">
                                @Html.DropDownListFor(m => m.formaPago, new SelectList(Model.TipoPagoSource, "strCve", "strDesc"), new { @class = "form-control input-sm" })
                                @Html.ValidationMessageFor(m => m.formaPago)
                            </div>
                        </div>
                    </div>

                    <div id="dvHiddenInNew9" class="form-group" style="margin-bottom: 1px;">
                        @Html.Label("¿ Tiene más autos ?:", new { @class = "col-xs-2 control-label-sm" })
                        <div class="col-xs-2">
                            @Html.CheckBoxFor(m => m.TieneMasAutos, new { @class = "form-control checkbox-sm" })
                        </div>

                        @Html.Label("Cobertura:", new { @class = "col-xs-2 control-label-sm", style = "text-align: right;" })
                        <div class="form-validator col-xs-2">
                            @Html.DropDownListFor(m => m.meses, new SelectList(Model.CoberturaSource, "Value", "Text"), new { @class = "form-control input-sm" })
                            @Html.ValidationMessageFor(m => m.meses)
                        </div>

                        @{
        if (Model.ModulodeTrabajo == "Cotizaciones")
        {
                                @Html.Label("Fecha Cotización:", new { @class = "col-xs-2 control-label-sm", style = "text-align: right;" })
                                <div class="col-xs-2">
                                    @Html.TextBoxFor(m => m.fechaCotizacion, String.Format("{0:dd/MM/yyyy}", Model.fechaCotizacion)
                                                                            , new { @class = "form-control input-sm readOnlyWhite", @readonly = "readonly" })
                                </div>
        }
                        }
                    </div> 

                    <hr style="margin-top: 8px; margin-bottom: 8px;" />

                    <div id="dvHiddenInNew10" class="form-group" style="margin-bottom: 1px;">
                        @Html.Label("Financiamiento:", new { @class = "col-xs-2 control-label-sm" })
                        <div class="col-xs-2">
                            @Html.CheckBoxFor(m => m.CotizacionFinanciada, new { @class = "form-control checkbox-sm", @id = "CotizacionFinanciada" })
                        </div>
                        <div id="dvHiddenFinanciadora" class="col-xs-4">
                            @Html.TextBoxFor(m => m.cNombreFinanciamiento, new { @class = "form-control input-sm", @placeholder = "Nombre de Financiadora", value = Model.cNombreFinanciamiento })
                            @Html.ValidationMessageFor(m => m.cNombreFinanciamiento)
                        </div>

                        <div class="col-xs-4 text-right">
                            <a id="popoverDates"
                               class="btn btn-sm btn-primary"
                               title="<strong>Fechas de Vigencia</strong>"
                               role="button">Vigencia de Documento
                            </a>
                        </div>
                    </div>
                </div>
                <div class="tab-pane" id="tbAddressPhones">
                    <div class="container">
                        <div class="row clearfix">
                            <div class="col-xs-6 column">
                                <div class="form-group" style="margin-bottom: 1px;">
                                    <div class="form-validator col-xs-12">
                                        @Html.TextBoxFor(m => m.RFC, new { @class = "form-control input-sm uppercase", @placeholder = "R.F.C.", value = Model.RFC, @name = "RFC" })
                                        @Html.ValidationMessageFor(model => model.RFC)
                                    </div>
                                </div>
                                <div class="form-group" style="margin-bottom: 1px;">
                                    <div class="form-validator col-xs-6">
                                        @Html.TextBoxFor(m => m.email, new { @class = "form-control input-sm", @placeholder = "Email", value = Model.email })
                                        @Html.ValidationMessageFor(model => model.email)
                                    </div>

                                    <div class="form-validator col-xs-6">
                                        @Html.TextBoxFor(m => m.emailOtro, new { @class = "form-control input-sm", @placeholder = "Email alterno", value = Model.emailOtro })
                                        @Html.ValidationMessageFor(model => model.emailOtro)
                                    </div>
                                </div>
                            </div>

                            <div class="col-xs-6 column">
                                <div class="form-group">
                                    <div class="form-validator col-xs-9">
                                        @Html.TextAreaFor(m => m.obsTarj, new
                                   {
                                       @rows = 3,
                                       @class = "form-control input-sm uppercase",
                                       @placeholder = "Observaciones",
                                       value = Model.obsTarj
                                   })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="panel panel-primary" style="margin: 2px 5px 5px 5px;">
                        <div class="panel-heading clearfix" style="padding-top: 3px; padding-bottom: 3px;">
                            <h3 class="panel-title pull-left" style="padding-top: 7.5px;"><span class="fa fa-street-view fa-lg"></span>&nbsp;Direcciones del Cliente</h3>
                            <div class="pull-right">
                                <button type="button" 
                                        class="btn btn-sm btn-primary" 
                                        title="Agregar nueva dirección"
                                        onclick="ShowDataInfo('Nueva Dirección'
                                                            , '@Url.Action("CreateDireccion", "General")'
                                                            , { id: $('#cotizacionID').val(), modulo: '@ViewBag.Modulo', addressID: 0 });">
                                    <span class="fa fa-street-view"></span>&nbsp;Nueva Dirección
                                </button>
                            </div>
                        </div>
                        <div class="panel-body" style="padding: 3px;">
                            <table id="tblAddress"
                                   data-height="150"
                                   data-striped="true"
                                   data-cache="false"
                                   data-resizable="true"
                                   data-classes="table table-hover table-bordered table-condensed miniText"
                                   data-id-field='nTipoDirID' 
                                   data-pagination="false">
                                <thead>
                                    <tr>
                                        <th data-field="nTipoDirID"
                                            data-sortable="false"
                                            data-width="45"
                                            data-align="center"
                                            data-valign="middle"
                                            data-formatter="dirFormatter"
                                            data-events="operateDGEvents">
                                        </th>
                                        <th data-field="nCP"                data-width="100" data-align="center" data-valign="middle">Código Postal</th>
                                        <th data-field="cDireccion"         data-width="350" data-align="center" data-valign="middle">Calle</th>
                                        <th data-field="nExterior"          data-width="105" data-align="center" data-valign="middle">No. Exterior</th>
                                        <th data-field="nInterior"          data-width="105" data-align="center" data-valign="middle">No. Interior</th>
                                        <th data-field="cColonia"           data-width="250" data-align="center" data-valign="middle">Colonia</th>
                                        <th data-field="cPoblacion"         data-width="250" data-align="center" data-valign="middle">Población</th>
                                        <th data-field="DescripcionEstado"  data-width="250" data-align="center" data-valign="middle">Estado</th>
                                        <th data-field="SeImprime"          data-width="60"  data-align="center" data-valign="middle" data-formatter="checkFormatter">Imprimir</th>
                                        <th data-field="EsDireccionFiscal"  data-width="60"  data-align="center" data-valign="middle" data-formatter="checkFormatter">Fiscal</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                    </div>

                    <div class="panel panel-primary" style="margin: 3px;">
                        <div class="panel-heading clearfix" style="padding-top: 3px; padding-bottom: 3px;">
                            <h3 class="panel-title pull-left" style="padding-top: 7.5px;"><span class="fa fa-phone fa-lg"></span>&nbsp;Teléfonos del Cliente</h3>
                        </div>
                        <div class="panel-body" style="padding: 3px;">
                            <table id="tblPhones"
                                   data-height="145"
                                   data-striped="true"
                                   data-cache="false"
                                   data-classes="table table-hover table-bordered table-condensed miniText"
                                   data-id-field='cTpo1' 
                                   data-pagination="false">
                                <thead>
                                    <tr>
                                        <th data-field="cTpo1"
                                            data-sortable="false"
                                            data-width="45"
                                            data-align="center"
                                            data-valign="middle"
                                            data-formatter="tlfFormatter"
                                            data-events="operateDGEvents">
                                        </th>
                                        <th data-field="cLada"      data-width="60"  data-align="center" data-valign="middle">Lada</th>
                                        <th data-field="cTel"       data-width="120" data-align="center" data-valign="middle">Télefono</th>
                                        <th data-field="cOficina"   data-width="120" data-align="center" data-valign="middle">Oficina</th>
                                        <th data-field="cExtension" data-width="75"  data-align="center" data-valign="middle">Extensión</th>
                                        <th data-field="cFax"       data-width="120" data-align="center" data-valign="middle">Fax</th>
                                        <th data-field="cCelular"   data-width="100" data-align="center" data-valign="middle">Celular</th>
                                        <th data-field="cOtro1"     data-width="100" data-align="center" data-valign="middle">Otro</th>
                                        <th data-field="cRadio"     data-width="100" data-align="center" data-valign="middle">Radio</th>
                                        <th data-field="cRadioID"   data-width="60"  data-align="center" data-valign="middle">IDRadio</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Popover hidden content -->
        <div id="popoverHiddenContent" style="display: none">
            <div class="form-group" style="margin-bottom: 1px;">
                @Html.Label("Inicio:", new { @class = "col-xs-4 control-label-sm" })
                <div class="col-xs-8">
                    @Html.TextBoxFor(m => m.inicioVigencia, String.Format("{0:dd/MM/yyyy}", Model.inicioVigencia), new { @class = "form-control input-sm readOnlyWhite", @readonly = "readonly" })
                </div>
            </div>
            <div class="form-group" style="margin-bottom: 1px;">
                @Html.Label("Fin:", new { @class = "col-xs-4 control-label-sm" })
                <div class="col-xs-8">
                    @Html.TextBoxFor(m => m.finVigencia, String.Format("{0:dd/MM/yyyy}", Model.finVigencia), new { @class = "form-control input-sm readOnlyWhite", @readonly = "readonly" })
                </div>
            </div> 
        </div>
        
        @Html.HiddenFor(m => m.IsNew, new { value = Model.IsNew })
        @Html.HiddenFor(m => m.cotizacionID, new { value = Model.cotizacionID })
        @Html.HiddenFor(m => m.sexo, new { value = Model.sexo })
        @Html.HiddenFor(m => m.persona, new { value = Model.persona })
        @Html.HiddenFor(m => m.meses, new { value = Model.meses })
        @Html.HiddenFor(m => m.VendidaPor, new { value = Model.VendidaPor })
        @Html.HiddenFor(m => m.cVendida, new { value = Model.cVendida })
        @Html.HiddenFor(m => m.estatus, new { value = Model.estatus })
        @Html.HiddenFor(m => m.tipoPago, new { value = Model.tipoPago })
        @Html.HiddenFor(m => m.nSolicitud, new { value = Model.nSolicitud })
        @Html.HiddenFor(m => m.cEndosoCancela, new { value = Model.cEndosoCancela })
        @Html.HiddenFor(m => m.ModulodeTrabajo, new { value = Model.ModulodeTrabajo })
        @Html.HiddenFor(m => m.subRamo, new { value = Model.subRamo })
        @Html.HiddenFor(m => m.impresa, new { value = Model.impresa })
        @Html.HiddenFor(m => m.seguimiento, new { value = Model.seguimiento })
        @Html.HiddenFor(m => m.emailOtro, new { value = Model.emailOtro })
        @Html.HiddenFor(m => m.cNombreFinanciamiento, new { value = Model.cNombreFinanciamiento })
        @Html.HiddenFor(m => m.recomienda, new { value = Model.recomienda })
        @Html.HiddenFor(m => m.CuponImpreso, new { value = Model.CuponImpreso })
        @Html.HiddenFor(m => m.comentariosV, new { value = Model.comentariosV })
    }
</div>
<script type="text/javascript">
    function validateProcar(){
        $("#control").change(function(){
            if($("#control").val()>30){
                $("#control").parent().addClass("has-error");
            }else{
                $("#control").parent().removeClass("has-error");
            }

        });
    }
    $(document).ready(function () {
        validateProcar();
        //Deshabilitar BackSpace Tecla F5
        $(document).keydown(function(e) {
            if (e.keyCode == 116) return false;
            var element = e.target.nodeName.toLowerCase();
            if (element != 'input' && element != 'textarea') {
                if (e.keyCode === 8) {
                    return false;
                }
            }
        });

        // Para selecciona el Texto de los Input 
        $("input").on('mouseup', function() { $(this).select(); });

        $('#AplicaTERSSA').bootstrapSwitch({ onText: "Si", offText: "No" });
        $('#AplicaCobertura100').bootstrapSwitch({ onText: "Si", offText: "No" });
        $('#AplicaERA').bootstrapSwitch({ onText: "Si", offText: "No" });
        $('#TieneMasAutos').bootstrapSwitch({ onText: "Si", offText: "No" });
        $('#CotizacionFinanciada').bootstrapSwitch({ onText: "Si", offText: "No" });
        $('#EsHombre').bootstrapSwitch({ onText: "Masculino", offText: "Femenino" });
        $('#EsPersonaFisica').bootstrapSwitch({ onText: "Física", offText: "Moral" });

        // Cambiar los text a Mayusculas cuando contengan la clase uppercase
        $('.uppercase').focusout(function () {
            // Uppercase-ize contents
            this.value = this.value.toUpperCase();
        });

        // Para generar el nombre del asegurado
        GeneraNombreAsegurado = function () {
            var ap = $("#apellidoPaterno").val().toString().toUpperCase();
            var am = $("#apellidoMaterno").val().toString().toUpperCase();
            var nm = $("#nombres").val().toString().toUpperCase();
            $("#nombreAsegurado").val(ap + " " + am + " " + nm);
        };

        // Condicionando textbox a solo letras
        SoloLetras('apellidoPaterno');
        $("#apellidoPaterno").on("keyup", (function () { GeneraNombreAsegurado(); }));

        SoloLetras('apellidoMaterno');
        $("#apellidoMaterno").on("keyup", (function () { GeneraNombreAsegurado(); }));

        SoloLetras('nombres');
        $("#nombres").on("keyup", (function () { GeneraNombreAsegurado(); }));

        // Validación de campos numericos
        ValidaNumero("codigoPostal");
        ValidaNumero("PrimerTelefono");
        ValidaNumero("procarinicial");

        ValidaNumero("numVehiculos");
        $("#numVehiculos").on("change", (function () {
            window.CarsAdded = $(this).val();
            if ($(this).val() == 1)
            {
                BootstrapDialog.confirm(
                {
                    title: 'Vehículos',
                    message: '<div id="alerts"><img class="img-quest">¿ Tiene mas automóviles en casa ?</div>',
                    btnOKLabel: 'Si',
                    btnCancelLabel: 'No',
                    callback: function (result) {
                        if (result) {
                            $('#TieneMasAutos').bootstrapSwitch('state', true)
                            window.RefreshPP = false;
                            ShowDataInfo('Nuevo Prospecto'
                                       , '@Url.Action("ProspectoEnDocumento", "General")'
                                       , { id: $('#cotizacionID').val(), modulo: '@ViewBag.Modulo' , prospectID: 0 });
                        }
                        else {
                            $('#TieneMasAutos').bootstrapSwitch('state', false)
                        }
                    }
                });                
            }
        }));

        ValidaNumero("numConductores");
        $("#numConductores").on("change", (function () {
            window.DriversAdded = $(this).val();
        }));

        // PopOver para las fechas
        $('#popoverDates').popover({
            placement: 'top',
            html: true,
            content: function () {
                return $('#popoverHiddenContent').html();
            }
        });

        /* Formato columnas de imagenes de direcciones */
        dirFormatter = function (value, row, index) {
            return [
                '<a class="revDir" href="javascript:void(0)" title="Revisar información"><i class="fa fa-street-view fa-lg"></i></a>&nbsp;',
                '<a class="delDir" href="javascript:void(0)" title="Eliminar dirección"><i class="fa fa-trash-o fa-lg"></i></a>',
                ].join('');
        };

        /* Formato columnas de imagenes de teléfonos */
        tlfFormatter = function (value, row, index) {
            return [
                '<a class="revTlf" href="javascript:void(0)" title="Revisar información"><i class="fa fa-phone fa-lg"></i></a>&nbsp;',
                '<a class="delTlf" href="javascript:void(0)" title="Eliminar teléfono"><i class="fa fa-trash-o fa-lg"></i></a>',
                ].join('');
        };

        // Eventos disparados en el click de las imagenes
        window.operateDGEvents = {
            // Direcciones
            'click .revDir': function (e, value, row, index) {
                ShowDataInfo('Editar Dirección', '@Url.Action("DireccionEnDocumento", "General")', { id: $('#cotizacionID').val(), modulo: '@ViewBag.Modulo', addressID: value });
            },
            'click .delDir': function (e, value, row, index) { },
            // Teléfonos
            'click .revTlf': function (e, value, row, index) {
                ShowDataInfo('Editar Teléfono', '@Url.Action("TelefonoEnDocumento", "General")', { phoneID: value });
            },
            'click .delTlf': function (e, value, row, index) { }
        };

        // Oculto los objetos si es nueva cotización
        var isnew = '@ViewBag.IsNew'.toLowerCase();
        for (var i = 1; i < 11; i++) {
            if (isnew == 'true') { $("#dvHiddenInNew" + i.toString() + "").hide(); }
            else { $("#dvHiddenInNew" + i.toString() + "").show(); }
        }

        // Oculto la pestaña de Direcciones si es nuevo
        if (isnew == 'true') { $("#tbHiddenInNew").hide(); }
        else {
            $("#tbHiddenInNew").show();

            // Configuro el change del text y combo de agente
            $("#agente").on("change", function () { $("#ddlAgent").val($("#agente").val()); });
            $("#ddlAgent").on("change", function () { $("#agente").val($("#ddlAgent" + " option:selected").val()); });

            // Llama al método para validar el ERA por la Forma de Pago
            $('#formaPago').on("change", function () {
                var data = { fPagoID: $("#formaPago").val() };
                $.get('@Url.Action("ValidaERA", "General")', data, function (result) {
                    $("#AplicaERA").bootstrapSwitch("readonly", false);
                    $('#AplicaERA').bootstrapSwitch('state', (result == "S" ? true : false))
                    $("#AplicaERA").bootstrapSwitch("readonly", true);
                });
            });
        }

        // Configuro el change del text y combo de campaña
        $("#txtCampain").on("change", function () { $("#ddlCampain").val($("#txtCampain").val()); });
        $("#ddlCampain").on("change", function () { $("#txtCampain").val($("#ddlCampain" + " option:selected").val()); });

        // Configuro el change combo de Promoción
        $("#ddlPromo").on("change", function () { MuestraOcultaKIT($("#ddlPromo" + " option:selected").val()); });

        //Mostrar - Ocultar KIT
        function MuestraOcultaKIT(NumddlPromo){
            if (NumddlPromo == 1 || NumddlPromo == 3 )
            {
                $("#dvHiddenKIT").show();
            }
            else
            {
                $("#dvHiddenKIT").hide();
            }
        }

        // Mostrar - Ocultar Financiamiento
        if($('#CotizacionFinanciada').is(":checked"))
        {
            $('#dvHiddenFinanciadora').show();  
        }
        else
        {
            $('#dvHiddenFinanciadora').hide();  
        }
        // Mostrar - Ocultar Financiamiento
        $('#CotizacionFinanciada').on('switchChange.bootstrapSwitch', function (event, state) {
            if($(this).is(":checked")) {
                $('#dvHiddenFinanciadora').show();
            }
            else
            {
                $('#dvHiddenFinanciadora').hide();
            }
        });

        // Funcion para refrescar los datos de las tablas
        RefreshGeneralTables = function (tableName, accionName) {
            var jsUrl = '@Url.Action("REFRESH", "General")'.replace('REFRESH', accionName);
            $('#' + tableName + '').bootstrapTable('refresh', { url: jsUrl });
        };

        // Setear click de las tablas
        SetHighLightClickInTables('tblAddress');
        SetHighLightClickInTables('tblPhones');

        // Setear los datos en las tablas
        SetDataInTables('tblAddress', @Html.Raw(Json.Encode(Model.direcciones)));
        SetDataInTables('tblPhones', @Html.Raw(Json.Encode(Model.telefono)));
        
    });
</script>